result <- check_weather_risk("Amsterdam", "5754250f57228c5fa0fdf22fd68cb02e")
library(httr)
library(jsonlite)
check_forecast_risk <- function(location, api_key) {
# Initialize variables
risk_detected <- FALSE
message <- NULL
# Fetch current weather
current_url <- "http://api.openweathermap.org/data/2.5/weather"
current_response <- GET(current_url, query = list(q = location, appid = api_key, units = "metric"))
if (status_code(current_response) != 200) {
warning("Current weather API request failed. Check location or API key.")
return(list(forecast_score = 0, forecast_message = "Could not retrieve current weather."))
}
current_data <- fromJSON(content(current_response, as = "text", encoding = "UTF-8"))
current_temp <- current_data$main$temp
# Fetch forecast data
forecast_url <- "http://api.openweathermap.org/data/2.5/forecast"
forecast_response <- GET(forecast_url, query = list(q = location, appid = api_key, units = "metric"))
if (status_code(forecast_response) != 200) {
warning("Forecast API request failed. Check location or API key.")
return(list(forecast_score = 0, forecast_message = "Could not retrieve forecast data."))
}
forecast_data <- fromJSON(content(forecast_response, as = "text", encoding = "UTF-8"))
forecasts <- forecast_data$list
# Check for temperature change > 3°C from current temp
for (forecast in forecasts) {
forecast_temp <- forecast$main$temp
if (!is.null(forecast_temp) && abs(forecast_temp - current_temp) > 3) {
risk_detected <- TRUE
message <- "Sudden temperature change expected."
break
}
}
return(list(
forecast_score = ifelse(risk_detected, 1, 0),
forecast_message = ifelse(risk_detected, message, "No significant temperature change forecasted.")
))
}
result <- check_weather_risk("Amsterdam", "5754250f57228c5fa0fdf22fd68cb02e")
result <- check_weather_risk("Amsterdam", "5754250f57228c5fa0fdf22fd68cb02e")
result <- check_forecast_risk("Amsterdam", "5754250f57228c5fa0fdf22fd68cb02e")
check_forecast_risk <- function(location, api_key) {
# Initialize variables
risk_detected <- FALSE
message <- NULL
# Fetch current weather
current_url <- "http://api.openweathermap.org/data/2.5/weather"
current_response <- GET(current_url, query = list(q = location, appid = api_key, units = "metric"))
if (status_code(current_response) != 200) {
warning("Current weather API request failed. Check location or API key.")
return(list(forecast_score = 0, forecast_message = "Could not retrieve current weather."))
}
current_data <- fromJSON(content(current_response, as = "text", encoding = "UTF-8"))
current_temp <- current_data$main$temp
# Fetch forecast data
forecast_url <- "http://api.openweathermap.org/data/2.5/forecast"
forecast_response <- GET(forecast_url, query = list(q = location, appid = api_key, units = "metric"))
if (status_code(forecast_response) != 200) {
warning("Forecast API request failed. Check location or API key.")
return(list(forecast_score = 0, forecast_message = "Could not retrieve forecast data."))
}
forecast_data <- fromJSON(content(forecast_response, as = "text", encoding = "UTF-8"))
forecasts <- forecast_data$list
# Check for temperature change > 3°C from current temp
for (i in seq_along(forecasts)) {
forecast <- forecasts[[i]]
forecast_temp <- forecast$main$temp
if (!is.null(forecast_temp) && abs(forecast_temp - current_temp) > 3) {
risk_detected <- TRUE
message <- "Sudden temperature change expected."
break
}
}
return(list(
forecast_score = ifelse(risk_detected, 1, 0),
forecast_message = ifelse(risk_detected, message, "No significant temperature change forecasted.")
))
}
result <- check_forecast_risk("Amsterdam", "5754250f57228c5fa0fdf22fd68cb02e")
check_forecast_risk <- function(location, api_key) {
risk_detected <- FALSE
message <- NULL
# Fetch current weather
current_url <- "http://api.openweathermap.org/data/2.5/weather"
current_response <- GET(current_url, query = list(q = location, appid = api_key, units = "metric"))
if (status_code(current_response) != 200) {
warning("Current weather API request failed. Check location or API key.")
return(list(forecast_score = 0, forecast_message = "Could not retrieve current weather."))
}
current_data <- fromJSON(content(current_response, as = "text", encoding = "UTF-8"))
current_temp <- current_data$main$temp
# Fetch forecast data
forecast_url <- "http://api.openweathermap.org/data/2.5/forecast"
forecast_response <- GET(forecast_url, query = list(q = location, appid = api_key, units = "metric"))
if (status_code(forecast_response) != 200) {
warning("Forecast API request failed. Check location or API key.")
return(list(forecast_score = 0, forecast_message = "Could not retrieve forecast data."))
}
forecast_data <- fromJSON(content(forecast_response, as = "text", encoding = "UTF-8"))
# Convert forecasts to a list explicitly
forecasts <- as.list(forecast_data$list)
for (forecast in forecasts) {
forecast_temp <- forecast$main$temp
if (!is.null(forecast_temp) && abs(forecast_temp - current_temp) > 3) {
risk_detected <- TRUE
message <- "Sudden temperature change expected."
break
}
}
return(list(
forecast_score = ifelse(risk_detected, 1, 0),
forecast_message = ifelse(risk_detected, message, "No significant temperature change forecasted.")
))
}
# Test the function
result <- check_forecast_risk("Amsterdam", "5754250f57228c5fa0fdf22fd68cb02e")
# Test the function
result <- check_forecast_risk("Amsterdam", "5754250f57228c5fa0fdf22fd68cb02e")
print(result)
library(httr)
library(jsonlite)
check_forecast_risk <- function(location, api_key) {
risk_detected <- FALSE
message <- NULL
# Fetch current weather
current_url <- "http://api.openweathermap.org/data/2.5/weather"
current_response <- GET(current_url, query = list(q = location, appid = api_key, units = "metric"))
if (status_code(current_response) != 200) {
warning("Current weather API request failed.")
return(list(forecast_score = 0, forecast_message = "Could not retrieve current weather."))
}
current_data <- fromJSON(content(current_response, as = "text", encoding = "UTF-8"))
current_temp <- current_data$main$temp
# Fetch forecast data
forecast_url <- "http://api.openweathermap.org/data/2.5/forecast"
forecast_response <- GET(forecast_url, query = list(q = location, appid = api_key, units = "metric"))
if (status_code(forecast_response) != 200) {
warning("Forecast API request failed.")
return(list(forecast_score = 0, forecast_message = "Could not retrieve forecast data."))
}
forecast_data <- fromJSON(content(forecast_response, as = "text", encoding = "UTF-8"))
forecasts <- forecast_data$list
# Since forecasts is a data frame, loop over rows
for (i in seq_len(nrow(forecasts))) {
forecast_temp <- forecasts$main[[i]]$temp
if (!is.null(forecast_temp) && abs(forecast_temp - current_temp) > 3) {
risk_detected <- TRUE
message <- "Sudden temperature change expected."
break
}
}
return(list(
forecast_score = ifelse(risk_detected, 1, 0),
forecast_message = ifelse(risk_detected, message, "No significant temperature change forecasted.")
))
}
# Test the function
result <- check_forecast_risk("Amsterdam", "5754250f57228c5fa0fdf22fd68cb02e")
check_forecast_risk <- function(location, api_key) {
base_url <- "http://api.openweathermap.org/data/2.5/forecast"
response <- GET(base_url, query = list(q = location, appid = api_key, units = "metric"))
if (status_code(response) != 200) {
warning("Forecast API request failed. Check location or API key.")
return(list(forecast_score = 0, forecast_message = "Could not retrieve forecast data."))
}
data <- fromJSON(content(response, as = "text", encoding = "UTF-8"))
forecasts <- data$list
risk_detected <- FALSE
message <- NULL
for (i in seq_along(forecasts)) {
forecast <- forecasts[[i]]
pressure <- forecast$main$pressure
humidity <- forecast$main$humidity
temp <- forecast$main$temp
if (!is.null(pressure) && pressure < 1000) {
risk_detected <- TRUE
message <- "Low pressure expected (possible storm)."
break
}
if (!is.null(humidity) && (humidity > 85 || humidity < 30)) {
risk_detected <- TRUE
message <- "Extreme humidity expected."
break
}
if (!is.null(temp) && (temp >= 30 || temp <= 0)) {
risk_detected <- TRUE
message <- "Sudden temperature change expected."
break
}
}
return(list(
forecast_score = ifelse(risk_detected, 1, 0),
forecast_message = ifelse(risk_detected, message, "No significant weather changes expected.")
))
}
print(result)
# Test the function
result <- check_forecast_risk("Amsterdam", "5754250f57228c5fa0fdf22fd68cb02e")
check_weather_risk <- function(location, api_key) {
base_url <- "http://api.openweathermap.org/data/2.5/weather"
response <- GET(base_url, query = list(q = location, appid = api_key, units = "metric"))
if (status_code(response) != 200) {
warning("Weather API request failed. Check location or API key.")
return(list(weather_score = 0, details = NULL))
}
data <- fromJSON(content(response, as = "text", encoding = "UTF-8"))
pressure <- data$main$pressure
humidity <- data$main$humidity
temp <- data$main$temp
weather_score <- 0
if (!is.null(pressure) && pressure < 1000) weather_score <- weather_score + 1
if (!is.null(humidity) && (humidity > 85 || humidity < 30)) weather_score <- weather_score + 1
if (!is.null(temp) && (temp >= 30 || temp <= 0)) weather_score <- weather_score + 1
return(list(weather_score = weather_score, details = list(pressure = pressure, humidity = humidity, temp = temp)))
}
rm(check_forecast_risk)
# Test the function
result <- check_weather_risk("Amsterdam", "5754250f57228c5fa0fdf22fd68cb02e")
print(result)
print(result)
runApp("inst/app")
shiny::runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
devtools::load_all()      # loads all your R files as if the package were installed
devtools::install()       # installs your package into your library
rm(list = c("check_weather_risk", "evaluate_biological_factors"))
devtools::check()
